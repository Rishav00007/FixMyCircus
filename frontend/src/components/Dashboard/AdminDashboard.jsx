// // import React from "react";
// // import ComplaintList from "../Complaints/ComplaintList";
// // import reportService from "../../services/reportService";
// // import "./AdminDashboard.css";

// // export default function AdminDashboard() {
// //   return (
// //     <div className="admin-dashboard">
// //       <div className="admin-header">
// //         <h1 className="admin-title">All Complaints</h1>
// //         <button
// //           onClick={reportService.exportComplaintsCSV}
// //           className="export-btn"
// //         >
// //           Export Report
// //         </button>
// //       </div>
// //       <ComplaintList type="admin" />
// //     </div>
// //   );
// // }


// import React, { useState, useEffect } from "react";
// import ComplaintList from "../Complaints/ComplaintList";
// import reportService from "../../services/reportService";
// import ReportExport from "../Reports/ReportExport";
// import "./AdminDashboard.css";

// export default function AdminDashboard() {
//   const [reports, setReports] = useState([]);
//   const [loading, setLoading] = useState(false);
//   const [showExport, setShowExport] = useState(false);

//   // Fetch all reports for admin
//   useEffect(() => {
//     const fetchReports = async () => {
//       try {
//         setLoading(true);
//         const data = await reportService.getAllReports();
//         setReports(data.reports || []);
//       } catch (error) {
//         console.error("Error fetching reports:", error);
//       } finally {
//         setLoading(false);
//       }
//     };
//     fetchReports();
//   }, []);

//   const handleGenerateReport = async (filters) => {
//     try {
//       setLoading(true);
//       const response = await reportService.generateReport(filters);
//       alert("Report generated successfully!");
//       setReports((prev) => [response.report, ...prev]);
//     } catch (error) {
//       console.error(error);
//       alert(error.response?.data?.message || "Failed to generate report.");
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleDeleteReport = async (id) => {
//     try {
//       await reportService.deleteReport(id);
//       setReports((prev) => prev.filter((r) => r._id !== id));
//     } catch (error) {
//       alert("Failed to delete report");
//     }
//   };

//   return (
//     <div className="admin-dashboard">
//       <div className="admin-header">
//         <h1 className="admin-title">Complaint Management Dashboard</h1>
//         <div className="admin-actions">
//           <button
//             className="export-btn"
//             onClick={() => setShowExport(!showExport)}
//           >
//             {showExport ? "Close Report Panel" : "Export Report"}
//           </button>
//         </div>
//       </div>

//       {showExport && (
//         <ReportExport
//           onGenerate={handleGenerateReport}
//           loading={loading}
//         />
//       )}

//       <section className="complaint-section">
//         <h2>All Complaints</h2>
//         <ComplaintList type="admin" />
//       </section>

//       <section className="report-section">
//         <h2>Generated Reports</h2>
//         {loading ? (
//           <p>Loading reports...</p>
//         ) : reports.length === 0 ? (
//           <p>No reports generated yet.</p>
//         ) : (
//           <table className="report-table">
//             <thead>
//               <tr>
//                 <th>Date</th>
//                 <th>Total</th>
//                 <th>Resolved</th>
//                 <th>Pending</th>
//                 <th>Generated By</th>
//                 <th>Actions</th>
//               </tr>
//             </thead>
//             <tbody>
//               {reports.map((report) => (
//                 <tr key={report._id}>
//                   <td>{new Date(report.generatedDate).toLocaleDateString()}</td>
//                   <td>{report.totalComplaints}</td>
//                   <td>{report.resolvedCount}</td>
//                   <td>{report.pendingCount}</td>
//                   <td>{report.generatedBy?.name || "Admin"}</td>
//                   <td>
//                     <button
//                       className="view-btn"
//                       onClick={() => (window.location.href = `/reports/${report._id}`)}
//                     >
//                       View
//                     </button>
//                     <button
//                       className="delete-btn"
//                       onClick={() => handleDeleteReport(report._id)}
//                     >
//                       Delete
//                     </button>
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         )}
//       </section>
//     </div>
//   );
// }



import React, { useState, useEffect } from "react";
import ComplaintList from "../Complaints/ComplaintList";
import ComplaintCard from "../Complaints/ComplaintCard";
import reportService from "../../services/reportService";
import ReportExport from "../Reports/ReportExport";
import staffService from "../../services/staffService";
import "./AdminDashboard.css";

export default function AdminDashboard() {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showExport, setShowExport] = useState(false);
  const [complaints, setComplaints] = useState([]);

  // Fetch all reports for admin
  useEffect(() => {
    const fetchReports = async () => {
      try {
        setLoading(true);
        const data = await reportService.getAllReports();
        setReports(data.reports || []);
      } catch (error) {
        console.error("Error fetching reports:", error);
      } finally {
        setLoading(false);
      }
    };

    const fetchAllComplaints = async () => {
      try {
        const data = await staffService.getAllComplaints(); // Ensure this API exists
        setComplaints(data.complaints || []);
      } catch (error) {
        console.error("Error fetching complaints:", error);
      }
    };

    fetchReports();
    fetchAllComplaints();
  }, []);

  const handleGenerateReport = async (filters) => {
    try {
      setLoading(true);
      const response = await reportService.generateReport(filters);
      alert("Report generated successfully!");
      setReports((prev) => [response.report, ...prev]);
    } catch (error) {
      console.error(error);
      alert(error.response?.data?.message || "Failed to generate report.");
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteReport = async (id) => {
    try {
      await reportService.deleteReport(id);
      setReports((prev) => prev.filter((r) => r._id !== id));
    } catch (error) {
      alert("Failed to delete report");
    }
  };

  return (
    <div className="admin-dashboard">
      <div className="admin-header">
        <h1 className="admin-title">Complaint Management Dashboard</h1>
        <div className="admin-actions">
          <button
            className="export-btn"
            onClick={() => setShowExport(!showExport)}
          >
            {showExport ? "Close Report Panel" : "Export Report"}
          </button>
        </div>
      </div>

      {showExport && (
        <ReportExport onGenerate={handleGenerateReport} loading={loading} />
      )}

      {/* All Complaints */}
      <section className="complaint-section">
        <h2>All Complaints</h2>
        <ComplaintList type="admin" />
      </section>

      {/* Escalated Complaints */}
      <section className="escalated-section">
        <h2>Escalated Complaints</h2>
        {complaints.filter((c) => c.escalated).length > 0 ? (
          complaints
            .filter((c) => c.escalated)
            .map((c) => <ComplaintCard key={c._id} complaint={c} />)
        ) : (
          <p>No escalated complaints.</p>
        )}
      </section>

      {/* Reports */}
      <section className="report-section">
        <h2>Generated Reports</h2>
        {loading ? (
          <p>Loading reports...</p>
        ) : reports.length === 0 ? (
          <p>No reports generated yet.</p>
        ) : (
          <table className="report-table">
            <thead>
              <tr>
                <th>Date</th>
                <th>Total</th>
                <th>Resolved</th>
                <th>Pending</th>
                <th>Generated By</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {reports.map((report) => (
                <tr key={report._id}>
                  <td>
                    {new Date(report.generatedDate).toLocaleDateString()}
                  </td>
                  <td>{report.totalComplaints}</td>
                  <td>{report.resolvedCount}</td>
                  <td>{report.pendingCount}</td>
                  <td>{report.generatedBy?.name || "Admin"}</td>
                  <td>
                    <button
                      className="view-btn"
                      onClick={() =>
                        (window.location.href = `/reports/${report._id}`)
                      }
                    >
                      View
                    </button>
                    <button
                      className="delete-btn"
                      onClick={() => handleDeleteReport(report._id)}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </section>
    </div>
  );
}


